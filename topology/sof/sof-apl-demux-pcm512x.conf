








SectionData."SOF_ABI" {
	bytes "0x03,0x0b,0x00"
}
SectionManifest.STR(sof_manifest) {
	data [
		SOF_ABI
	]
}
#
# Demux topology for generic Apollolake UP^2 with pcm512x codec and HDMI.
#

# Include topology builder




































 

























# Include TLV library
# TLV
#
# Common TLV control ranges
#

SectionTLV."vtlv_m64s2" {
	Comment "-64dB step 2dB"

	scale {
		min "-6400"
		step "200"
		mute "1"
	}
}

SectionTLV."vtlv_m50s1" {
	Comment "-50dB step 1dB"

	scale {
		min "-5000"
		step "100"
		mute "1"
	}
}


# Include Token library

#
# SOF Tokens for differentiation.
#
# Differentiation can be done at the platform and machine level.
#
# Tokens are GUIDs

# TODO: pre-process this with UAPI headers GNU cpp.


SectionVendorTokens."sof_buffer_tokens" {
	SOF_TKN_BUF_SIZE			"100"
	SOF_TKN_BUF_CAPS			"101"
}

SectionVendorTokens."sof_dai_tokens" {
# Token retired with ABI 3.2, do not use for new capabilities
#	SOF_TKN_DAI_DMAC_CONFIG			"153"
	SOF_TKN_DAI_TYPE			"154"
	SOF_TKN_DAI_INDEX			"155"
	SOF_TKN_DAI_DIRECTION			"156"
}

SectionVendorTokens."sof_sched_tokens" {
	SOF_TKN_SCHED_PERIOD			"200"
	SOF_TKN_SCHED_PRIORITY			"201"
	SOF_TKN_SCHED_MIPS			"202"
	SOF_TKN_SCHED_CORE			"203"
	SOF_TKN_SCHED_FRAMES			"204"
	SOF_TKN_SCHED_TIME_DOMAIN		"205"
}

SectionVendorTokens."sof_volume_tokens" {
	SOF_TKN_VOLUME_RAMP_STEP_TYPE		"250"
	SOF_TKN_VOLUME_RAMP_STEP_MS		"251"
}

SectionVendorTokens."sof_src_tokens" {
	SOF_TKN_SRC_RATE_IN			"300"
	SOF_TKN_SRC_RATE_OUT			"301"
}

SectionVendorTokens."sof_pcm_tokens" {
	SOF_TKN_PCM_DMAC_CONFIG			"353"
}

SectionVendorTokens."sof_comp_tokens" {
	SOF_TKN_COMP_PERIOD_SINK_COUNT		"400"
	SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"401"
	SOF_TKN_COMP_FORMAT			"402"
# Token retired with ABI 3.2, do not use for new capabilities
#	SOF_TKN_COMP_PRELOAD_COUNT		"403"
}

SectionVendorTokens."sof_ssp_tokens" {
	SOF_TKN_INTEL_SSP_CLKS_CONTROL		"500"
	SOF_TKN_INTEL_SSP_MCLK_ID		"501"
	SOF_TKN_INTEL_SSP_SAMPLE_BITS		"502"
	SOF_TKN_INTEL_SSP_FRAME_PULSE_WIDTH 	"503"
	SOF_TKN_INTEL_SSP_QUIRKS		"504"
	SOF_TKN_INTEL_SSP_TDM_PADDING_PER_SLOT  "505"
	SOF_TKN_INTEL_SSP_BCLK_DELAY		"506"
}

SectionVendorTokens."sof_dmic_tokens" {
	SOF_TKN_INTEL_DMIC_DRIVER_VERSION	"600"
	SOF_TKN_INTEL_DMIC_CLK_MIN		"601"
	SOF_TKN_INTEL_DMIC_CLK_MAX		"602"
	SOF_TKN_INTEL_DMIC_DUTY_MIN		"603"
	SOF_TKN_INTEL_DMIC_DUTY_MAX		"604"
	SOF_TKN_INTEL_DMIC_NUM_PDM_ACTIVE	"605"
	SOF_TKN_INTEL_DMIC_SAMPLE_RATE		"608"
	SOF_TKN_INTEL_DMIC_FIFO_WORD_LENGTH	"609"
	SOF_TKN_INTEL_DMIC_UNMUTE_RAMP_TIME_MS	"610"
}

SectionVendorTokens."sof_dmic_pdm_tokens" {
	SOF_TKN_INTEL_DMIC_PDM_CTRL_ID		"700"
	SOF_TKN_INTEL_DMIC_PDM_MIC_A_Enable	"701"
	SOF_TKN_INTEL_DMIC_PDM_MIC_B_Enable	"702"
	SOF_TKN_INTEL_DMIC_PDM_POLARITY_A	"703"
	SOF_TKN_INTEL_DMIC_PDM_POLARITY_B	"704"
	SOF_TKN_INTEL_DMIC_PDM_CLK_EDGE		"705"
	SOF_TKN_INTEL_DMIC_PDM_SKEW		"706"
}

SectionVendorTokens."sof_tone_tokens" {
	SOF_TKN_TONE_SAMPLE_RATE		"800"
}

SectionVendorTokens."sof_process_tokens" {
	SOF_TKN_PROCESS_TYPE			"900"
}

SectionVendorTokens."sof_sai_tokens" {
	SOF_TKN_IMX_SAI_MCLK_ID			"1000"
}

SectionVendorTokens."sof_esai_tokens" {
	SOF_TKN_IMX_ESAI_MCLK_ID		"1100"
}

SectionVendorTokens."sof_stream_tokens" {
	SOF_TKN_STREAM_PLAYBACK_COMPATIBLE_D0I3		"1200"
	SOF_TKN_STREAM_CAPTURE_COMPATIBLE_D0I3		"1201"
}

SectionVendorTokens."sof_led_tokens" {
	SOF_TKN_MUTE_LED_USE			"1300"
	SOF_TKN_MUTE_LED_DIRECTION		"1301"
}


# Include Apollolake DSP configuration
#
# Broxton differentiation for pipelines and components
#
















# Low Latency PCM Configuration
SectionVendorTuples."pipe_ll_schedule_plat_tokens" {
	tokens "sof_sched_tokens"

	tuples."word" {
		SOF_TKN_SCHED_MIPS	"50000"
		
	}
}

SectionData."pipe_ll_schedule_plat" {
	tuples "pipe_ll_schedule_plat_tokens"
}

# Media PCM Configuration
SectionVendorTuples."pipe_media_schedule_plat_tokens" {
	tokens "sof_sched_tokens"

	tuples."word" {
		SOF_TKN_SCHED_MIPS	"100000"
		
	}
}

SectionData."pipe_media_schedule_plat" {
	tuples "pipe_media_schedule_plat_tokens"
}

# Tone Signal Generator Configuration
SectionVendorTuples."pipe_tone_schedule_plat_tokens" {
	tokens "sof_sched_tokens"

	tuples."word" {
		SOF_TKN_SCHED_MIPS	"200000"
		
	}
}

SectionData."pipe_tone_schedule_plat" {
	tuples "pipe_tone_schedule_plat_tokens"
}

# DAI schedule Configuration - scheduled by IRQ
SectionVendorTuples."pipe_dai_schedule_plat_tokens" {
	tokens "sof_sched_tokens"

	tuples."word" {
		SOF_TKN_SCHED_MIPS	"5000"
		
	}
}

SectionData."pipe_dai_schedule_plat" {
	tuples "pipe_dai_schedule_plat_tokens"
}




#
# Define the pipelines
#
# PCM0 ----> demux -----> SSP5 (pcm512x)
# PCM1 ----> volume -----> iDisp1
# PCM2 ----> volume -----> iDisp2
# PCM3 ----> volume -----> iDisp3
# PCM4 <---- demux
#


# Demux pipeline 1 on PCM 0 using max 2 channels of s32le.
# Set 1000us deadline on core 0 with priority 0




























# Demux Volume Pipeline
#
#  Low Latency Playback with demux and volume.
#
# Pipeline Endpoints for connection are :-
#
#	Playback Demux
#	B2 (DAI buffer)
#
#
#  host PCM_P -- B0 --> Demux(M) -- B1 --> volume -- B2 --> sink DAI0
#                             |
#                             pipeline n+1 --> DAI
#

# Include topology builder




































 








# Use default parameters
SectionData."DEMUX_priv" {
	       bytes "0x53,0x4f,0x46,0x00,0x00,0x00,0x00,0x00,
       0x28,0x00,0x00,0x00,0x00,0x60,0x00,0x03,
       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
       0x02,0x00,0x02,0x00,0x02,0x00,0x00,0x00,
       0x01,0x00,0x00,0x00,0x02,0x01,0x02,0x04,
       0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,
       0x05,0x00,0x00,0x00,0x02,0x01,0x02,0x04,
       0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00"

}


# demux Bytes control with max value of 255
SectionControlBytes."DEMUX" {

	# control belongs to this index group
	index "1"

	# control uses bespoke driver get/put/info ID for io ops
	ops."ctl" {
		info "bytes"
		#258 binds the mixer control to bytes get/put handlers
	}
	# control uses bespoke driver get/put/info ID for ext ops
	extops."extctl" {
		#258 binds the mixer control to bytes get/put handlers
		get "258"
		put "258"
	}

	base ""
	num_regs ""
	mask ""
	#
	max "304"
	
	access [
		tlv_write
		tlv_read
		tlv_callback
	]
	data [
		DEMUX_priv
	]
}

# Volume Mixer control with max value of 32
 
SectionControlMixer."1 Master Playback Volume" {

	# control belongs to this index group
	index "1"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "32"
	invert "false"
	#TLV 32 steps from -64dB to 0dB for 2dB
	tlv "vtlv_m64s2"
 
}

#
# Volume configuration
#

SectionVendorTuples."playback_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."playback_pga_conf" {
	tuples "playback_pga_tokens"
}

#
# Components and Buffers
#

# Host "Low latency Playback" PCM
# with 2 sink and 0 source periods
SectionVendorTuples."PCM0P_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."PCM0P_data_w_comp" {
	tuples "PCM0P_tuples_w_comp"
}
SectionWidget."PCM0P" {
	index "1"
	type "aif_in"
	no_pm "true"
	stream_name "Low Latency Playback 0"
	data [
		"PCM0P_data_w_comp"
	]
}

# "Master Playback Volume" has 2 source and x sink periods for DAI ping-pong
SectionVendorTuples."PGA1.1_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA1.1_data_w" {
	tuples "PGA1.1_tuples_w"
}
SectionVendorTuples."PGA1.1_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."PGA1.1_data_str" {
	tuples "PGA1.1_tuples_str"
}
SectionWidget."PGA1.1" {
	index "1"
	type "pga"
	no_pm "true"
	data [
		"PGA1.1_data_w"
		"PGA1.1_data_str"
		"playback_pga_conf"
	]
	mixer [
		"1 Master Playback Volume"
		
	]

}

# Mux 0 has 2 sink and source periods.
SectionVendorTuples."MUXDEMUX1.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."MUXDEMUX1.0_data_w" {
	tuples "MUXDEMUX1.0_tuples_w"
}
SectionVendorTuples."MUXDEMUX1.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionVendorTuples."MUXDEMUX1.0_mux_process_tuples_str" {
	tokens "sof_process_tokens"
	tuples."string" {
		SOF_TKN_PROCESS_TYPE	"DEMUX"
	}
}
SectionData."MUXDEMUX1.0_data_str" {
	tuples "MUXDEMUX1.0_tuples_str"
	tuples "MUXDEMUX1.0_mux_process_tuples_str"
}
SectionWidget."MUXDEMUX1.0" {
	index "1"
	type "effect"
	no_pm "true"
	data [
		"MUXDEMUX1.0_data_w"
		"MUXDEMUX1.0_data_str"
	]
	bytes [
		"DEMUX"
         
	]
}

# Low Latency Buffers
SectionVendorTuples."BUF1.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"768"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF1.0_data" {
	tuples "BUF1.0_tuples"
}
SectionWidget."BUF1.0" {
	index "1"
	type "buffer"
	no_pm "true"
	data [
		"BUF1.0_data"
	]
}
SectionVendorTuples."BUF1.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"768"
		SOF_TKN_BUF_CAPS	"  65"
	}
}
SectionData."BUF1.1_data" {
	tuples "BUF1.1_tuples"
}
SectionWidget."BUF1.1" {
	index "1"
	type "buffer"
	no_pm "true"
	data [
		"BUF1.1_data"
	]
}
SectionVendorTuples."BUF1.2_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"768"
		SOF_TKN_BUF_CAPS	"  65"
	}
}
SectionData."BUF1.2_data" {
	tuples "BUF1.2_tuples"
}
SectionWidget."BUF1.2" {
	index "1"
	type "buffer"
	no_pm "true"
	data [
		"BUF1.2_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P --B0--> Demux --B1--> volume ---B2--> sink DAI0

SectionGraph."pipe-ll-playback-1" {
	index "1"

	lines [
		"BUF1.0, , PCM0P"
		"MUXDEMUX1.0, , BUF1.0"
		"BUF1.1, , MUXDEMUX1.0"
		"PGA1.1, , BUF1.1"
		"BUF1.2, , PGA1.1"
		
	]
}
#
# Pipeline Source and Sinks
#




#
# PCM Configuration
#


# PCM capabilities supported by FW
SectionPCMCapabilities."Low Latency Playback 0" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}






# Low Latency playback pipeline 2 on PCM 1 using max 2 channels of s32le.
# Set 1000us deadline on core 0 with priority 0




























# Low Latency Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."2 Master Playback Volume" {

	# control belongs to this index group
	index "2"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "32"
	invert "false"
	#TLV 32 steps from -64dB to 0dB for 2dB
	tlv "vtlv_m64s2"
 
}

#
# Volume configuration
#

SectionVendorTuples."playback_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."playback_pga_conf" {
	tuples "playback_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Playback" PCM
# with 2 sink and 0 source periods
SectionVendorTuples."PCM1P_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."PCM1P_data_w_comp" {
	tuples "PCM1P_tuples_w_comp"
}
SectionWidget."PCM1P" {
	index "2"
	type "aif_in"
	no_pm "true"
	stream_name "Passthrough Playback 1"
	data [
		"PCM1P_data_w_comp"
	]
}


# "Volume" has 2 source and x sink periods
SectionVendorTuples."PGA2.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA2.0_data_w" {
	tuples "PGA2.0_tuples_w"
}
SectionVendorTuples."PGA2.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."PGA2.0_data_str" {
	tuples "PGA2.0_tuples_str"
}
SectionWidget."PGA2.0" {
	index "2"
	type "pga"
	no_pm "true"
	data [
		"PGA2.0_data_w"
		"PGA2.0_data_str"
		"playback_pga_conf"
	]
	mixer [
		"2 Master Playback Volume"
		
	]

}

# Playback Buffers
SectionVendorTuples."BUF2.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"768"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF2.0_data" {
	tuples "BUF2.0_tuples"
}
SectionWidget."BUF2.0" {
	index "2"
	type "buffer"
	no_pm "true"
	data [
		"BUF2.0_data"
	]
}
SectionVendorTuples."BUF2.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"768"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF2.1_data" {
	tuples "BUF2.1_tuples"
}
SectionWidget."BUF2.1" {
	index "2"
	type "buffer"
	no_pm "true"
	data [
		"BUF2.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

SectionGraph."pipe-pass-vol-playback-2" {
	index "2"

	lines [
		"BUF2.0, , PCM1P"
		"PGA2.0, , BUF2.0"
		"BUF2.1, , PGA2.0"
		
	]
}

#
# Pipeline Source and Sinks
#




#
# PCM Configuration

#
SectionPCMCapabilities."Passthrough Playback 1" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}






# Low Latency playback pipeline 3 on PCM 2 using max 2 channels of s32le.
# Set 1000us deadline on core 0 with priority 0




























# Low Latency Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."3 Master Playback Volume" {

	# control belongs to this index group
	index "3"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "32"
	invert "false"
	#TLV 32 steps from -64dB to 0dB for 2dB
	tlv "vtlv_m64s2"
 
}

#
# Volume configuration
#

SectionVendorTuples."playback_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."playback_pga_conf" {
	tuples "playback_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Playback" PCM
# with 2 sink and 0 source periods
SectionVendorTuples."PCM2P_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."PCM2P_data_w_comp" {
	tuples "PCM2P_tuples_w_comp"
}
SectionWidget."PCM2P" {
	index "3"
	type "aif_in"
	no_pm "true"
	stream_name "Passthrough Playback 2"
	data [
		"PCM2P_data_w_comp"
	]
}


# "Volume" has 2 source and x sink periods
SectionVendorTuples."PGA3.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA3.0_data_w" {
	tuples "PGA3.0_tuples_w"
}
SectionVendorTuples."PGA3.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."PGA3.0_data_str" {
	tuples "PGA3.0_tuples_str"
}
SectionWidget."PGA3.0" {
	index "3"
	type "pga"
	no_pm "true"
	data [
		"PGA3.0_data_w"
		"PGA3.0_data_str"
		"playback_pga_conf"
	]
	mixer [
		"3 Master Playback Volume"
		
	]

}

# Playback Buffers
SectionVendorTuples."BUF3.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"768"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF3.0_data" {
	tuples "BUF3.0_tuples"
}
SectionWidget."BUF3.0" {
	index "3"
	type "buffer"
	no_pm "true"
	data [
		"BUF3.0_data"
	]
}
SectionVendorTuples."BUF3.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"768"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF3.1_data" {
	tuples "BUF3.1_tuples"
}
SectionWidget."BUF3.1" {
	index "3"
	type "buffer"
	no_pm "true"
	data [
		"BUF3.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

SectionGraph."pipe-pass-vol-playback-3" {
	index "3"

	lines [
		"BUF3.0, , PCM2P"
		"PGA3.0, , BUF3.0"
		"BUF3.1, , PGA3.0"
		
	]
}

#
# Pipeline Source and Sinks
#




#
# PCM Configuration

#
SectionPCMCapabilities."Passthrough Playback 2" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}






# Low Latency playback pipeline 4 on PCM 3 using max 2 channels of s32le.
# Set 1000us deadline on core 0 with priority 0




























# Low Latency Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."4 Master Playback Volume" {

	# control belongs to this index group
	index "4"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "32"
	invert "false"
	#TLV 32 steps from -64dB to 0dB for 2dB
	tlv "vtlv_m64s2"
 
}

#
# Volume configuration
#

SectionVendorTuples."playback_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."playback_pga_conf" {
	tuples "playback_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Playback" PCM
# with 2 sink and 0 source periods
SectionVendorTuples."PCM3P_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."PCM3P_data_w_comp" {
	tuples "PCM3P_tuples_w_comp"
}
SectionWidget."PCM3P" {
	index "4"
	type "aif_in"
	no_pm "true"
	stream_name "Passthrough Playback 3"
	data [
		"PCM3P_data_w_comp"
	]
}


# "Volume" has 2 source and x sink periods
SectionVendorTuples."PGA4.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA4.0_data_w" {
	tuples "PGA4.0_tuples_w"
}
SectionVendorTuples."PGA4.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."PGA4.0_data_str" {
	tuples "PGA4.0_tuples_str"
}
SectionWidget."PGA4.0" {
	index "4"
	type "pga"
	no_pm "true"
	data [
		"PGA4.0_data_w"
		"PGA4.0_data_str"
		"playback_pga_conf"
	]
	mixer [
		"4 Master Playback Volume"
		
	]

}

# Playback Buffers
SectionVendorTuples."BUF4.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"768"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF4.0_data" {
	tuples "BUF4.0_tuples"
}
SectionWidget."BUF4.0" {
	index "4"
	type "buffer"
	no_pm "true"
	data [
		"BUF4.0_data"
	]
}
SectionVendorTuples."BUF4.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"768"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF4.1_data" {
	tuples "BUF4.1_tuples"
}
SectionWidget."BUF4.1" {
	index "4"
	type "buffer"
	no_pm "true"
	data [
		"BUF4.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

SectionGraph."pipe-pass-vol-playback-4" {
	index "4"

	lines [
		"BUF4.0, , PCM3P"
		"PGA4.0, , BUF4.0"
		"BUF4.1, , PGA4.0"
		
	]
}

#
# Pipeline Source and Sinks
#




#
# PCM Configuration

#
SectionPCMCapabilities."Passthrough Playback 3" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}






#
# DAIs configuration
#


# playback DAI is SSP5 using 2 periods
# Buffers use s24le format, 1000us deadline on core 0 with priority 0























# DAI Playback connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP5.OUT_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."SSP5.OUT_data_w_comp" {
	tuples "SSP5.OUT_tuples_w_comp"
}
SectionVendorTuples."SSP5.OUT_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"5"
		SOF_TKN_DAI_DIRECTION	"0"
	}
}
SectionData."SSP5.OUT_data_w" {
	tuples "SSP5.OUT_tuples_w"
}
SectionVendorTuples."SSP5.OUT_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP5.OUT_data_str" {
	tuples "SSP5.OUT_tuples_str"
}
SectionVendorTuples."SSP5.OUT_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s24le"
	}
}
SectionData."SSP5.OUT_data_comp_str" {
	tuples "SSP5.OUT_tuples_comp_str"
}
SectionWidget."SSP5.OUT" {
	index "1"
	type "dai_in"
	stream_name "SSP5-Codec"
	no_pm "true"
	data [
		"SSP5.OUT_data_w"
		"SSP5.OUT_data_w_comp"
		"SSP5.OUT_data_str"
		"SSP5.OUT_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.1.SSP5.OUT_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.1.SSP5.OUT_data" {
	tuples "PIPELINE.1.SSP5.OUT_tuples"
}
SectionWidget."PIPELINE.1.SSP5.OUT" {
	index "1"
	type "scheduler"
	no_pm "true"
	stream_name "SSP5.OUT"
	data [
		"PIPELINE.1.SSP5.OUT_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP5" {
	index "1"

	lines [
		"SSP5.OUT, , BUF1.2"
		
	]
}






# currently this dai is here as "virtual" capture backend
SectionVendorTuples."SSP5.IN_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"3"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."SSP5.IN_data_w_comp" {
	tuples "SSP5.IN_tuples_w_comp"
}
SectionVendorTuples."SSP5.IN_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	5
		SOF_TKN_DAI_DIRECTION	"1"
	}
}
SectionData."SSP5.IN_data_w" {
	tuples "SSP5.IN_tuples_w"
}
SectionVendorTuples."SSP5.IN_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	SSP
	}
}
SectionData."SSP5.IN_data_str" {
	tuples "SSP5.IN_tuples_str"
}
SectionVendorTuples."SSP5.IN_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s24le"
	}
}
SectionData."SSP5.IN_data_comp_str" {
	tuples "SSP5.IN_tuples_comp_str"
}
SectionWidget."SSP5.IN" {
	index "1"
	type "dai_out"
	stream_name "SSP5-Codec"
	no_pm "true"
	data [
		"SSP5.IN_data_w"
		"SSP5.IN_data_w_comp"
		"SSP5.IN_data_str"
		"SSP5.IN_data_comp_str"
	]
}

# Capture pipeline 5 from demux on PCM 5 using max 2 channels of s32le.




























# Capture Passthrough Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_C <-- B0 <-- sink DAI0

# Include topology builder




































 


























#
# Components and Buffers
#

# Host "Passthrough Capture" PCM
# with 0 sink and 2 source periods
SectionVendorTuples."PCM4C_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PCM4C_data_w_comp" {
	tuples "PCM4C_tuples_w_comp"
}
SectionWidget."PCM4C" {
	index "5"
	type "aif_out"
	no_pm "true"
	stream_name "Passthrough Capture 4"
	data [
		"PCM4C_data_w_comp"
	]
}

# Capture Buffers
SectionVendorTuples."BUF5.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"768"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF5.0_data" {
	tuples "BUF5.0_tuples"
}
SectionWidget."BUF5.0" {
	index "5"
	type "buffer"
	no_pm "true"
	data [
		"BUF5.0_data"
	]
}

# Virtual output widget
SectionWidget."ECHO REF 5" {
       index "5"
       type "out_drv"
       no_pm "true"
}

#
# Pipeline Graph
#
#  host PCM_C <-- B0 <-- sink DAI0

SectionGraph."pipe-pass-capture-5" {
	index "5"

	lines [
		"PCM4C, , BUF5.0"
		"BUF5.0, , ECHO REF 5"
		
	]
}
#
# Pipeline Source and Sinks
#



SectionVendorTuples."PIPELINE.5.PCM4C_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"1"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.5.PCM4C_data" {
	tuples "PIPELINE.5.PCM4C_tuples"
}
SectionWidget."PIPELINE.5.PCM4C" {
	index "5"
	type "scheduler"
	no_pm "true"
	stream_name "PCM4C"
	data [
		"PIPELINE.5.PCM4C_data"
		"pipe_ll_schedule_plat"
	]
}
#
# PCM Configuration
#

SectionPCMCapabilities."Passthrough Capture 4" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}





# Connect demux to capture
SectionGraph."PIPE_CAP" {
	index "0"

	lines [
		# mux to capture
		"BUF5.0, , MUXDEMUX1.0"
	]
}

# Connect virtual capture to dai
SectionGraph."PIPE_CAP_VIRT" {
	index "5"

	lines [
		# mux to capture
		"ECHO REF 5, , SSP5.IN"
	]
}

# playback DAI is iDisp1 using 2 periods
# Buffers use s32le format, 1000us deadline on core 0 with priority 0























# DAI Playback connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."HDA0.OUT_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."HDA0.OUT_data_w_comp" {
	tuples "HDA0.OUT_tuples_w_comp"
}
SectionVendorTuples."HDA0.OUT_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"0"
		SOF_TKN_DAI_DIRECTION	"0"
	}
}
SectionData."HDA0.OUT_data_w" {
	tuples "HDA0.OUT_tuples_w"
}
SectionVendorTuples."HDA0.OUT_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"HDA"
	}
}
SectionData."HDA0.OUT_data_str" {
	tuples "HDA0.OUT_tuples_str"
}
SectionVendorTuples."HDA0.OUT_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."HDA0.OUT_data_comp_str" {
	tuples "HDA0.OUT_tuples_comp_str"
}
SectionWidget."HDA0.OUT" {
	index "2"
	type "dai_in"
	stream_name "iDisp1"
	no_pm "true"
	data [
		"HDA0.OUT_data_w"
		"HDA0.OUT_data_w_comp"
		"HDA0.OUT_data_str"
		"HDA0.OUT_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.2.HDA0.OUT_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.2.HDA0.OUT_data" {
	tuples "PIPELINE.2.HDA0.OUT_tuples"
}
SectionWidget."PIPELINE.2.HDA0.OUT" {
	index "2"
	type "scheduler"
	no_pm "true"
	stream_name "HDA0.OUT"
	data [
		"PIPELINE.2.HDA0.OUT_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."HDA0" {
	index "2"

	lines [
		"HDA0.OUT, , BUF2.1"
		
	]
}






# playback DAI is iDisp2 using 2 periods
# Buffers use s32le format, 1000us deadline on core 0 with priority 0























# DAI Playback connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."HDA1.OUT_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."HDA1.OUT_data_w_comp" {
	tuples "HDA1.OUT_tuples_w_comp"
}
SectionVendorTuples."HDA1.OUT_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"1"
		SOF_TKN_DAI_DIRECTION	"0"
	}
}
SectionData."HDA1.OUT_data_w" {
	tuples "HDA1.OUT_tuples_w"
}
SectionVendorTuples."HDA1.OUT_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"HDA"
	}
}
SectionData."HDA1.OUT_data_str" {
	tuples "HDA1.OUT_tuples_str"
}
SectionVendorTuples."HDA1.OUT_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."HDA1.OUT_data_comp_str" {
	tuples "HDA1.OUT_tuples_comp_str"
}
SectionWidget."HDA1.OUT" {
	index "3"
	type "dai_in"
	stream_name "iDisp2"
	no_pm "true"
	data [
		"HDA1.OUT_data_w"
		"HDA1.OUT_data_w_comp"
		"HDA1.OUT_data_str"
		"HDA1.OUT_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.3.HDA1.OUT_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.3.HDA1.OUT_data" {
	tuples "PIPELINE.3.HDA1.OUT_tuples"
}
SectionWidget."PIPELINE.3.HDA1.OUT" {
	index "3"
	type "scheduler"
	no_pm "true"
	stream_name "HDA1.OUT"
	data [
		"PIPELINE.3.HDA1.OUT_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."HDA1" {
	index "3"

	lines [
		"HDA1.OUT, , BUF3.1"
		
	]
}






# playback DAI is iDisp3 using 2 periods
# Buffers use s32le format, 1000us deadline on core 0 with priority 0























# DAI Playback connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."HDA2.OUT_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."HDA2.OUT_data_w_comp" {
	tuples "HDA2.OUT_tuples_w_comp"
}
SectionVendorTuples."HDA2.OUT_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"2"
		SOF_TKN_DAI_DIRECTION	"0"
	}
}
SectionData."HDA2.OUT_data_w" {
	tuples "HDA2.OUT_tuples_w"
}
SectionVendorTuples."HDA2.OUT_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"HDA"
	}
}
SectionData."HDA2.OUT_data_str" {
	tuples "HDA2.OUT_tuples_str"
}
SectionVendorTuples."HDA2.OUT_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."HDA2.OUT_data_comp_str" {
	tuples "HDA2.OUT_tuples_comp_str"
}
SectionWidget."HDA2.OUT" {
	index "4"
	type "dai_in"
	stream_name "iDisp3"
	no_pm "true"
	data [
		"HDA2.OUT_data_w"
		"HDA2.OUT_data_w_comp"
		"HDA2.OUT_data_str"
		"HDA2.OUT_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.4.HDA2.OUT_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.4.HDA2.OUT_data" {
	tuples "PIPELINE.4.HDA2.OUT_tuples"
}
SectionWidget."PIPELINE.4.HDA2.OUT" {
	index "4"
	type "scheduler"
	no_pm "true"
	stream_name "HDA2.OUT"
	data [
		"PIPELINE.4.HDA2.OUT_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."HDA2" {
	index "4"

	lines [
		"HDA2.OUT, , BUF4.1"
		
	]
}






# PCM Low Latency, id 0
SectionPCM."Port5" {

	# used for binding to the PCM
	id "0"

	dai."Port5 0" {
		id "0"
	}

	pcm."playback" {

		capabilities "Low Latency Playback 0"
	}
}

SectionPCM."HDMI1" {

	# used for binding to the PCM
	id "1"

	dai."HDMI1 1" {
		id "1"
	}

	pcm."playback" {

		capabilities "Passthrough Playback 1"
	}
}

SectionPCM."HDMI2" {

	# used for binding to the PCM
	id "2"

	dai."HDMI2 2" {
		id "2"
	}

	pcm."playback" {

		capabilities "Passthrough Playback 2"
	}
}

SectionPCM."HDMI3" {

	# used for binding to the PCM
	id "3"

	dai."HDMI3 3" {
		id "3"
	}

	pcm."playback" {

		capabilities "Passthrough Playback 3"
	}
}



SectionPCM."EchoRef" {

	# used for binding to the PCM
	id "4"

	dai."EchoRef 4" {
		id "4"
	}

	pcm."capture" {

		capabilities "Passthrough Capture 4"
	}

}



#
# BE configurations - overrides config in ACPI if present
#

#SSP 5 (ID: 0)
SectionHWConfig."SSP5" {

	id		"0"

	format		"I2S"
	mclk		"codec_mclk_in"
	mclk_freq	"24576000"
	
	bclk		"codec_slave"
	bclk_freq	"3072000"
	
	fsync		"codec_slave"
	fsync_freq	"48000"
	
	tdm_slots	"2"
	tdm_slot_width	"32"
	tx_slots	"3"
	rx_slots	"3"

}
SectionVendorTuples."DAICONFIG.SSP5_tuples" {
	tokens "sof_ssp_tokens"
	tuples."word" {
		SOF_TKN_INTEL_SSP_SAMPLE_BITS	"24"
		SOF_TKN_INTEL_SSP_QUIRKS	""
		SOF_TKN_INTEL_SSP_BCLK_DELAY	""
	}
	tuples."short" {
		SOF_TKN_INTEL_SSP_MCLK_ID	""
	}
}
SectionData."DAICONFIG.SSP5_data" {
	tuples "DAICONFIG.SSP5_tuples"
}



SectionVendorTuples."DAICONFIG.SSP5_tuples_common" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE		"SSP"
	}
	tuples."word" {
		SOF_TKN_DAI_INDEX		"5"
	}
}
SectionData."DAICONFIG.SSP5_data_common" {
	tuples "DAICONFIG.SSP5_tuples_common"
}

SectionBE."SSP5-Codec" {
	id "0"
	index "0"
	default_hw_conf_id	"0"

	hw_configs [
		"SSP5"
	]
	data [
		"DAICONFIG.SSP5_data"
		"DAICONFIG.SSP5_data_common"

	]
}




# 3 HDMI/DP outputs (ID: 1,2,3)
SectionHWConfig."HDA0" {

	id		"1"

	}

SectionVendorTuples."DAICONFIG.HDA0_tuples_common" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE		"HDA"
	}
	tuples."word" {
		SOF_TKN_DAI_INDEX		"0"
	}
}
SectionData."DAICONFIG.HDA0_data_common" {
	tuples "DAICONFIG.HDA0_tuples_common"
}

SectionBE."iDisp1" {
	id "1"
	index "0"
	default_hw_conf_id	"1"

	hw_configs [
		"HDA0"
	]
	data [
		
		"DAICONFIG.HDA0_data_common"

	]
}



SectionHWConfig."HDA1" {

	id		"2"

	}

SectionVendorTuples."DAICONFIG.HDA1_tuples_common" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE		"HDA"
	}
	tuples."word" {
		SOF_TKN_DAI_INDEX		"1"
	}
}
SectionData."DAICONFIG.HDA1_data_common" {
	tuples "DAICONFIG.HDA1_tuples_common"
}

SectionBE."iDisp2" {
	id "2"
	index "0"
	default_hw_conf_id	"2"

	hw_configs [
		"HDA1"
	]
	data [
		
		"DAICONFIG.HDA1_data_common"

	]
}



SectionHWConfig."HDA2" {

	id		"3"

	}

SectionVendorTuples."DAICONFIG.HDA2_tuples_common" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE		"HDA"
	}
	tuples."word" {
		SOF_TKN_DAI_INDEX		"2"
	}
}
SectionData."DAICONFIG.HDA2_data_common" {
	tuples "DAICONFIG.HDA2_tuples_common"
}

SectionBE."iDisp3" {
	id "3"
	index "0"
	default_hw_conf_id	"3"

	hw_configs [
		"HDA2"
	]
	data [
		
		"DAICONFIG.HDA2_data_common"

	]
}





