








SectionData."SOF_ABI" {
	bytes "0x03,0x0b,0x00"
}
SectionManifest.STR(sof_manifest) {
	data [
		SOF_ABI
	]
}
#
# Topology for generic Apollolake board with TDF8532
#

# Include topology builder




































 

























# Include TLV library
# TLV
#
# Common TLV control ranges
#

SectionTLV."vtlv_m64s2" {
	Comment "-64dB step 2dB"

	scale {
		min "-6400"
		step "200"
		mute "1"
	}
}

SectionTLV."vtlv_m50s1" {
	Comment "-50dB step 1dB"

	scale {
		min "-5000"
		step "100"
		mute "1"
	}
}


# Include Token library

#
# SOF Tokens for differentiation.
#
# Differentiation can be done at the platform and machine level.
#
# Tokens are GUIDs

# TODO: pre-process this with UAPI headers GNU cpp.


SectionVendorTokens."sof_buffer_tokens" {
	SOF_TKN_BUF_SIZE			"100"
	SOF_TKN_BUF_CAPS			"101"
}

SectionVendorTokens."sof_dai_tokens" {
# Token retired with ABI 3.2, do not use for new capabilities
#	SOF_TKN_DAI_DMAC_CONFIG			"153"
	SOF_TKN_DAI_TYPE			"154"
	SOF_TKN_DAI_INDEX			"155"
	SOF_TKN_DAI_DIRECTION			"156"
}

SectionVendorTokens."sof_sched_tokens" {
	SOF_TKN_SCHED_PERIOD			"200"
	SOF_TKN_SCHED_PRIORITY			"201"
	SOF_TKN_SCHED_MIPS			"202"
	SOF_TKN_SCHED_CORE			"203"
	SOF_TKN_SCHED_FRAMES			"204"
	SOF_TKN_SCHED_TIME_DOMAIN		"205"
}

SectionVendorTokens."sof_volume_tokens" {
	SOF_TKN_VOLUME_RAMP_STEP_TYPE		"250"
	SOF_TKN_VOLUME_RAMP_STEP_MS		"251"
}

SectionVendorTokens."sof_src_tokens" {
	SOF_TKN_SRC_RATE_IN			"300"
	SOF_TKN_SRC_RATE_OUT			"301"
}

SectionVendorTokens."sof_pcm_tokens" {
	SOF_TKN_PCM_DMAC_CONFIG			"353"
}

SectionVendorTokens."sof_comp_tokens" {
	SOF_TKN_COMP_PERIOD_SINK_COUNT		"400"
	SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"401"
	SOF_TKN_COMP_FORMAT			"402"
# Token retired with ABI 3.2, do not use for new capabilities
#	SOF_TKN_COMP_PRELOAD_COUNT		"403"
}

SectionVendorTokens."sof_ssp_tokens" {
	SOF_TKN_INTEL_SSP_CLKS_CONTROL		"500"
	SOF_TKN_INTEL_SSP_MCLK_ID		"501"
	SOF_TKN_INTEL_SSP_SAMPLE_BITS		"502"
	SOF_TKN_INTEL_SSP_FRAME_PULSE_WIDTH 	"503"
	SOF_TKN_INTEL_SSP_QUIRKS		"504"
	SOF_TKN_INTEL_SSP_TDM_PADDING_PER_SLOT  "505"
	SOF_TKN_INTEL_SSP_BCLK_DELAY		"506"
}

SectionVendorTokens."sof_dmic_tokens" {
	SOF_TKN_INTEL_DMIC_DRIVER_VERSION	"600"
	SOF_TKN_INTEL_DMIC_CLK_MIN		"601"
	SOF_TKN_INTEL_DMIC_CLK_MAX		"602"
	SOF_TKN_INTEL_DMIC_DUTY_MIN		"603"
	SOF_TKN_INTEL_DMIC_DUTY_MAX		"604"
	SOF_TKN_INTEL_DMIC_NUM_PDM_ACTIVE	"605"
	SOF_TKN_INTEL_DMIC_SAMPLE_RATE		"608"
	SOF_TKN_INTEL_DMIC_FIFO_WORD_LENGTH	"609"
	SOF_TKN_INTEL_DMIC_UNMUTE_RAMP_TIME_MS	"610"
}

SectionVendorTokens."sof_dmic_pdm_tokens" {
	SOF_TKN_INTEL_DMIC_PDM_CTRL_ID		"700"
	SOF_TKN_INTEL_DMIC_PDM_MIC_A_Enable	"701"
	SOF_TKN_INTEL_DMIC_PDM_MIC_B_Enable	"702"
	SOF_TKN_INTEL_DMIC_PDM_POLARITY_A	"703"
	SOF_TKN_INTEL_DMIC_PDM_POLARITY_B	"704"
	SOF_TKN_INTEL_DMIC_PDM_CLK_EDGE		"705"
	SOF_TKN_INTEL_DMIC_PDM_SKEW		"706"
}

SectionVendorTokens."sof_tone_tokens" {
	SOF_TKN_TONE_SAMPLE_RATE		"800"
}

SectionVendorTokens."sof_process_tokens" {
	SOF_TKN_PROCESS_TYPE			"900"
}

SectionVendorTokens."sof_sai_tokens" {
	SOF_TKN_IMX_SAI_MCLK_ID			"1000"
}

SectionVendorTokens."sof_esai_tokens" {
	SOF_TKN_IMX_ESAI_MCLK_ID		"1100"
}

SectionVendorTokens."sof_stream_tokens" {
	SOF_TKN_STREAM_PLAYBACK_COMPATIBLE_D0I3		"1200"
	SOF_TKN_STREAM_CAPTURE_COMPATIBLE_D0I3		"1201"
}

SectionVendorTokens."sof_led_tokens" {
	SOF_TKN_MUTE_LED_USE			"1300"
	SOF_TKN_MUTE_LED_DIRECTION		"1301"
}


# Include Apollolake DSP configuration
#
# Broxton differentiation for pipelines and components
#
















# Low Latency PCM Configuration
SectionVendorTuples."pipe_ll_schedule_plat_tokens" {
	tokens "sof_sched_tokens"

	tuples."word" {
		SOF_TKN_SCHED_MIPS	"50000"
		
	}
}

SectionData."pipe_ll_schedule_plat" {
	tuples "pipe_ll_schedule_plat_tokens"
}

# Media PCM Configuration
SectionVendorTuples."pipe_media_schedule_plat_tokens" {
	tokens "sof_sched_tokens"

	tuples."word" {
		SOF_TKN_SCHED_MIPS	"100000"
		
	}
}

SectionData."pipe_media_schedule_plat" {
	tuples "pipe_media_schedule_plat_tokens"
}

# Tone Signal Generator Configuration
SectionVendorTuples."pipe_tone_schedule_plat_tokens" {
	tokens "sof_sched_tokens"

	tuples."word" {
		SOF_TKN_SCHED_MIPS	"200000"
		
	}
}

SectionData."pipe_tone_schedule_plat" {
	tuples "pipe_tone_schedule_plat_tokens"
}

# DAI schedule Configuration - scheduled by IRQ
SectionVendorTuples."pipe_dai_schedule_plat_tokens" {
	tokens "sof_sched_tokens"

	tuples."word" {
		SOF_TKN_SCHED_MIPS	"5000"
		
	}
}

SectionData."pipe_dai_schedule_plat" {
	tuples "pipe_dai_schedule_plat_tokens"
}


#
# Define the pipelines
#
# PCM0 -----> Volume -----> SSP4
# PCM1 <----> Volume <----> SSP2(Dirana Pb/Cp)
# PCM2 <----> Volume <----> SSP0(BT HFP out/in)
# PCM3 <----- Volume <----- SSP1(HDMI in)
# PCM4 <----> Volume <----> SSP3(Modem out/in)
# PCM5 <----> Volume <----> SSP5(TestPin out/in)
#


# Low Latency playback pipeline 1 on PCM 0 using max 4 channels of s32le.
# 1000us deadline on core 0 with priority 0




























# Low Latency Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."1 Master Playback Volume" {

	# control belongs to this index group
	index "1"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "32"
	invert "false"
	#TLV 32 steps from -64dB to 0dB for 2dB
	tlv "vtlv_m64s2"
 
}

#
# Volume configuration
#

SectionVendorTuples."playback_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."playback_pga_conf" {
	tuples "playback_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Playback" PCM
# with 2 sink and 0 source periods
SectionVendorTuples."PCM0P_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."PCM0P_data_w_comp" {
	tuples "PCM0P_tuples_w_comp"
}
SectionWidget."PCM0P" {
	index "1"
	type "aif_in"
	no_pm "true"
	stream_name "Passthrough Playback 0"
	data [
		"PCM0P_data_w_comp"
	]
}


# "Volume" has 2 source and x sink periods
SectionVendorTuples."PGA1.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA1.0_data_w" {
	tuples "PGA1.0_tuples_w"
}
SectionVendorTuples."PGA1.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."PGA1.0_data_str" {
	tuples "PGA1.0_tuples_str"
}
SectionWidget."PGA1.0" {
	index "1"
	type "pga"
	no_pm "true"
	data [
		"PGA1.0_data_w"
		"PGA1.0_data_str"
		"playback_pga_conf"
	]
	mixer [
		"1 Master Playback Volume"
		
	]

}

# Playback Buffers
SectionVendorTuples."BUF1.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"1536"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF1.0_data" {
	tuples "BUF1.0_tuples"
}
SectionWidget."BUF1.0" {
	index "1"
	type "buffer"
	no_pm "true"
	data [
		"BUF1.0_data"
	]
}
SectionVendorTuples."BUF1.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"1536"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF1.1_data" {
	tuples "BUF1.1_tuples"
}
SectionWidget."BUF1.1" {
	index "1"
	type "buffer"
	no_pm "true"
	data [
		"BUF1.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

SectionGraph."pipe-pass-vol-playback-1" {
	index "1"

	lines [
		"BUF1.0, , PCM0P"
		"PGA1.0, , BUF1.0"
		"BUF1.1, , PGA1.0"
		
	]
}

#
# Pipeline Source and Sinks
#




#
# PCM Configuration

#
SectionPCMCapabilities."Passthrough Playback 0" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "4"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}






# Low Latency playback pipeline 2 on PCM 1 using max 8 channels of s32le.
# 1000us deadline on core 0 with priority 0




























# Low Latency Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."2 Master Playback Volume" {

	# control belongs to this index group
	index "2"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "32"
	invert "false"
	#TLV 32 steps from -64dB to 0dB for 2dB
	tlv "vtlv_m64s2"
 
}

#
# Volume configuration
#

SectionVendorTuples."playback_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."playback_pga_conf" {
	tuples "playback_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Playback" PCM
# with 2 sink and 0 source periods
SectionVendorTuples."PCM1P_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."PCM1P_data_w_comp" {
	tuples "PCM1P_tuples_w_comp"
}
SectionWidget."PCM1P" {
	index "2"
	type "aif_in"
	no_pm "true"
	stream_name "Passthrough Playback 1"
	data [
		"PCM1P_data_w_comp"
	]
}


# "Volume" has 2 source and x sink periods
SectionVendorTuples."PGA2.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA2.0_data_w" {
	tuples "PGA2.0_tuples_w"
}
SectionVendorTuples."PGA2.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."PGA2.0_data_str" {
	tuples "PGA2.0_tuples_str"
}
SectionWidget."PGA2.0" {
	index "2"
	type "pga"
	no_pm "true"
	data [
		"PGA2.0_data_w"
		"PGA2.0_data_str"
		"playback_pga_conf"
	]
	mixer [
		"2 Master Playback Volume"
		
	]

}

# Playback Buffers
SectionVendorTuples."BUF2.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"3072"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF2.0_data" {
	tuples "BUF2.0_tuples"
}
SectionWidget."BUF2.0" {
	index "2"
	type "buffer"
	no_pm "true"
	data [
		"BUF2.0_data"
	]
}
SectionVendorTuples."BUF2.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"3072"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF2.1_data" {
	tuples "BUF2.1_tuples"
}
SectionWidget."BUF2.1" {
	index "2"
	type "buffer"
	no_pm "true"
	data [
		"BUF2.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

SectionGraph."pipe-pass-vol-playback-2" {
	index "2"

	lines [
		"BUF2.0, , PCM1P"
		"PGA2.0, , BUF2.0"
		"BUF2.1, , PGA2.0"
		
	]
}

#
# Pipeline Source and Sinks
#




#
# PCM Configuration

#
SectionPCMCapabilities."Passthrough Playback 1" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "8"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}






# Low Latency capture pipeline 3 on PCM 1 using max 8 channels of s32le.
# 1000us deadline on core 0 with priority 0




























# Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_C <-- B0 <-- Volume 0 <-- B1 <-- source DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."3 Master Capture Volume" {

	# control belongs to this index group
	index "3"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "80"
	invert "false"
	#TLV 80 steps from -50dB to +30dB for 1dB
	tlv "vtlv_m50s1"
 
}

#
# Volume Configuration
#

SectionVendorTuples."capture_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."capture_pga_conf" {
	tuples "capture_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Capture" PCM
# with 0 sink and 2 source periods
SectionVendorTuples."PCM1C_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PCM1C_data_w_comp" {
	tuples "PCM1C_tuples_w_comp"
}
SectionWidget."PCM1C" {
	index "3"
	type "aif_out"
	no_pm "true"
	stream_name "Passthrough Capture 1"
	data [
		"PCM1C_data_w_comp"
	]
}

# "Volume" has x source and 2 sink periods
SectionVendorTuples."PGA3.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA3.0_data_w" {
	tuples "PGA3.0_tuples_w"
}
SectionVendorTuples."PGA3.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."PGA3.0_data_str" {
	tuples "PGA3.0_tuples_str"
}
SectionWidget."PGA3.0" {
	index "3"
	type "pga"
	no_pm "true"
	data [
		"PGA3.0_data_w"
		"PGA3.0_data_str"
		"capture_pga_conf"
	]
	mixer [
		"3 Master Capture Volume"
		
	]

}

# Capture Buffers
SectionVendorTuples."BUF3.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"3072"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF3.0_data" {
	tuples "BUF3.0_tuples"
}
SectionWidget."BUF3.0" {
	index "3"
	type "buffer"
	no_pm "true"
	data [
		"BUF3.0_data"
	]
}
SectionVendorTuples."BUF3.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"3072"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF3.1_data" {
	tuples "BUF3.1_tuples"
}
SectionWidget."BUF3.1" {
	index "3"
	type "buffer"
	no_pm "true"
	data [
		"BUF3.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P <-- B0 <-- Volume 0 <-- B1 <-- sink DAI0

SectionGraph."pipe-pass-vol-capture-3" {
	index "3"

	lines [
		"PCM1C, , BUF3.0"
		"BUF3.0, , PGA3.0"
		"PGA3.0, , BUF3.1"
		
	]
}

#
# Pipeline Source and Sinks
#



#
# PCM Configuration
#

SectionPCMCapabilities."Passthrough Capture 1" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "8"
	channels_max "8"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}





# Low Latency playback pipeline 4 on PCM 2 using max 2 channels of s16le.
# 1000us deadline on core 0 with priority 0




























# Low Latency Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."4 Master Playback Volume" {

	# control belongs to this index group
	index "4"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "32"
	invert "false"
	#TLV 32 steps from -64dB to 0dB for 2dB
	tlv "vtlv_m64s2"
 
}

#
# Volume configuration
#

SectionVendorTuples."playback_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."playback_pga_conf" {
	tuples "playback_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Playback" PCM
# with 2 sink and 0 source periods
SectionVendorTuples."PCM2P_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."PCM2P_data_w_comp" {
	tuples "PCM2P_tuples_w_comp"
}
SectionWidget."PCM2P" {
	index "4"
	type "aif_in"
	no_pm "true"
	stream_name "Passthrough Playback 2"
	data [
		"PCM2P_data_w_comp"
	]
}


# "Volume" has 2 source and x sink periods
SectionVendorTuples."PGA4.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA4.0_data_w" {
	tuples "PGA4.0_tuples_w"
}
SectionVendorTuples."PGA4.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."PGA4.0_data_str" {
	tuples "PGA4.0_tuples_str"
}
SectionWidget."PGA4.0" {
	index "4"
	type "pga"
	no_pm "true"
	data [
		"PGA4.0_data_w"
		"PGA4.0_data_str"
		"playback_pga_conf"
	]
	mixer [
		"4 Master Playback Volume"
		
	]

}

# Playback Buffers
SectionVendorTuples."BUF4.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF4.0_data" {
	tuples "BUF4.0_tuples"
}
SectionWidget."BUF4.0" {
	index "4"
	type "buffer"
	no_pm "true"
	data [
		"BUF4.0_data"
	]
}
SectionVendorTuples."BUF4.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF4.1_data" {
	tuples "BUF4.1_tuples"
}
SectionWidget."BUF4.1" {
	index "4"
	type "buffer"
	no_pm "true"
	data [
		"BUF4.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

SectionGraph."pipe-pass-vol-playback-4" {
	index "4"

	lines [
		"BUF4.0, , PCM2P"
		"PGA4.0, , BUF4.0"
		"BUF4.1, , PGA4.0"
		
	]
}

#
# Pipeline Source and Sinks
#




#
# PCM Configuration

#
SectionPCMCapabilities."Passthrough Playback 2" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}






# Low Latency capture pipeline 5 on PCM 2 using max 2 channels of s16le.
# 1000us deadline on core 0 with priority 0




























# Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_C <-- B0 <-- Volume 0 <-- B1 <-- source DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."5 Master Capture Volume" {

	# control belongs to this index group
	index "5"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "80"
	invert "false"
	#TLV 80 steps from -50dB to +30dB for 1dB
	tlv "vtlv_m50s1"
 
}

#
# Volume Configuration
#

SectionVendorTuples."capture_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."capture_pga_conf" {
	tuples "capture_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Capture" PCM
# with 0 sink and 2 source periods
SectionVendorTuples."PCM2C_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PCM2C_data_w_comp" {
	tuples "PCM2C_tuples_w_comp"
}
SectionWidget."PCM2C" {
	index "5"
	type "aif_out"
	no_pm "true"
	stream_name "Passthrough Capture 2"
	data [
		"PCM2C_data_w_comp"
	]
}

# "Volume" has x source and 2 sink periods
SectionVendorTuples."PGA5.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA5.0_data_w" {
	tuples "PGA5.0_tuples_w"
}
SectionVendorTuples."PGA5.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."PGA5.0_data_str" {
	tuples "PGA5.0_tuples_str"
}
SectionWidget."PGA5.0" {
	index "5"
	type "pga"
	no_pm "true"
	data [
		"PGA5.0_data_w"
		"PGA5.0_data_str"
		"capture_pga_conf"
	]
	mixer [
		"5 Master Capture Volume"
		
	]

}

# Capture Buffers
SectionVendorTuples."BUF5.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF5.0_data" {
	tuples "BUF5.0_tuples"
}
SectionWidget."BUF5.0" {
	index "5"
	type "buffer"
	no_pm "true"
	data [
		"BUF5.0_data"
	]
}
SectionVendorTuples."BUF5.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF5.1_data" {
	tuples "BUF5.1_tuples"
}
SectionWidget."BUF5.1" {
	index "5"
	type "buffer"
	no_pm "true"
	data [
		"BUF5.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P <-- B0 <-- Volume 0 <-- B1 <-- sink DAI0

SectionGraph."pipe-pass-vol-capture-5" {
	index "5"

	lines [
		"PCM2C, , BUF5.0"
		"BUF5.0, , PGA5.0"
		"PGA5.0, , BUF5.1"
		
	]
}

#
# Pipeline Source and Sinks
#



#
# PCM Configuration
#

SectionPCMCapabilities."Passthrough Capture 2" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}





# Low Latency capture pipeline 6 on PCM 3 using max 2 channels of s16le.
# 1000us deadline on core 0 with priority 0




























# Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_C <-- B0 <-- Volume 0 <-- B1 <-- source DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."6 Master Capture Volume" {

	# control belongs to this index group
	index "6"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "80"
	invert "false"
	#TLV 80 steps from -50dB to +30dB for 1dB
	tlv "vtlv_m50s1"
 
}

#
# Volume Configuration
#

SectionVendorTuples."capture_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."capture_pga_conf" {
	tuples "capture_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Capture" PCM
# with 0 sink and 2 source periods
SectionVendorTuples."PCM3C_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PCM3C_data_w_comp" {
	tuples "PCM3C_tuples_w_comp"
}
SectionWidget."PCM3C" {
	index "6"
	type "aif_out"
	no_pm "true"
	stream_name "Passthrough Capture 3"
	data [
		"PCM3C_data_w_comp"
	]
}

# "Volume" has x source and 2 sink periods
SectionVendorTuples."PGA6.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA6.0_data_w" {
	tuples "PGA6.0_tuples_w"
}
SectionVendorTuples."PGA6.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."PGA6.0_data_str" {
	tuples "PGA6.0_tuples_str"
}
SectionWidget."PGA6.0" {
	index "6"
	type "pga"
	no_pm "true"
	data [
		"PGA6.0_data_w"
		"PGA6.0_data_str"
		"capture_pga_conf"
	]
	mixer [
		"6 Master Capture Volume"
		
	]

}

# Capture Buffers
SectionVendorTuples."BUF6.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF6.0_data" {
	tuples "BUF6.0_tuples"
}
SectionWidget."BUF6.0" {
	index "6"
	type "buffer"
	no_pm "true"
	data [
		"BUF6.0_data"
	]
}
SectionVendorTuples."BUF6.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF6.1_data" {
	tuples "BUF6.1_tuples"
}
SectionWidget."BUF6.1" {
	index "6"
	type "buffer"
	no_pm "true"
	data [
		"BUF6.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P <-- B0 <-- Volume 0 <-- B1 <-- sink DAI0

SectionGraph."pipe-pass-vol-capture-6" {
	index "6"

	lines [
		"PCM3C, , BUF6.0"
		"BUF6.0, , PGA6.0"
		"PGA6.0, , BUF6.1"
		
	]
}

#
# Pipeline Source and Sinks
#



#
# PCM Configuration
#

SectionPCMCapabilities."Passthrough Capture 3" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}





# Low Latency playback pipeline 7 on PCM 4 using max 2 channels of s16le.
# 1000us deadline on core 0 with priority 0




























# Low Latency Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."7 Master Playback Volume" {

	# control belongs to this index group
	index "7"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "32"
	invert "false"
	#TLV 32 steps from -64dB to 0dB for 2dB
	tlv "vtlv_m64s2"
 
}

#
# Volume configuration
#

SectionVendorTuples."playback_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."playback_pga_conf" {
	tuples "playback_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Playback" PCM
# with 2 sink and 0 source periods
SectionVendorTuples."PCM4P_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."PCM4P_data_w_comp" {
	tuples "PCM4P_tuples_w_comp"
}
SectionWidget."PCM4P" {
	index "7"
	type "aif_in"
	no_pm "true"
	stream_name "Passthrough Playback 4"
	data [
		"PCM4P_data_w_comp"
	]
}


# "Volume" has 2 source and x sink periods
SectionVendorTuples."PGA7.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA7.0_data_w" {
	tuples "PGA7.0_tuples_w"
}
SectionVendorTuples."PGA7.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."PGA7.0_data_str" {
	tuples "PGA7.0_tuples_str"
}
SectionWidget."PGA7.0" {
	index "7"
	type "pga"
	no_pm "true"
	data [
		"PGA7.0_data_w"
		"PGA7.0_data_str"
		"playback_pga_conf"
	]
	mixer [
		"7 Master Playback Volume"
		
	]

}

# Playback Buffers
SectionVendorTuples."BUF7.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF7.0_data" {
	tuples "BUF7.0_tuples"
}
SectionWidget."BUF7.0" {
	index "7"
	type "buffer"
	no_pm "true"
	data [
		"BUF7.0_data"
	]
}
SectionVendorTuples."BUF7.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF7.1_data" {
	tuples "BUF7.1_tuples"
}
SectionWidget."BUF7.1" {
	index "7"
	type "buffer"
	no_pm "true"
	data [
		"BUF7.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

SectionGraph."pipe-pass-vol-playback-7" {
	index "7"

	lines [
		"BUF7.0, , PCM4P"
		"PGA7.0, , BUF7.0"
		"BUF7.1, , PGA7.0"
		
	]
}

#
# Pipeline Source and Sinks
#




#
# PCM Configuration

#
SectionPCMCapabilities."Passthrough Playback 4" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}






# Low Latency capture pipeline 8 on PCM 4 using max 2 channels of s16le.
# 1000us deadline on core 0 with priority 0




























# Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_C <-- B0 <-- Volume 0 <-- B1 <-- source DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."8 Master Capture Volume" {

	# control belongs to this index group
	index "8"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "80"
	invert "false"
	#TLV 80 steps from -50dB to +30dB for 1dB
	tlv "vtlv_m50s1"
 
}

#
# Volume Configuration
#

SectionVendorTuples."capture_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."capture_pga_conf" {
	tuples "capture_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Capture" PCM
# with 0 sink and 2 source periods
SectionVendorTuples."PCM4C_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PCM4C_data_w_comp" {
	tuples "PCM4C_tuples_w_comp"
}
SectionWidget."PCM4C" {
	index "8"
	type "aif_out"
	no_pm "true"
	stream_name "Passthrough Capture 4"
	data [
		"PCM4C_data_w_comp"
	]
}

# "Volume" has x source and 2 sink periods
SectionVendorTuples."PGA8.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA8.0_data_w" {
	tuples "PGA8.0_tuples_w"
}
SectionVendorTuples."PGA8.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."PGA8.0_data_str" {
	tuples "PGA8.0_tuples_str"
}
SectionWidget."PGA8.0" {
	index "8"
	type "pga"
	no_pm "true"
	data [
		"PGA8.0_data_w"
		"PGA8.0_data_str"
		"capture_pga_conf"
	]
	mixer [
		"8 Master Capture Volume"
		
	]

}

# Capture Buffers
SectionVendorTuples."BUF8.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF8.0_data" {
	tuples "BUF8.0_tuples"
}
SectionWidget."BUF8.0" {
	index "8"
	type "buffer"
	no_pm "true"
	data [
		"BUF8.0_data"
	]
}
SectionVendorTuples."BUF8.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF8.1_data" {
	tuples "BUF8.1_tuples"
}
SectionWidget."BUF8.1" {
	index "8"
	type "buffer"
	no_pm "true"
	data [
		"BUF8.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P <-- B0 <-- Volume 0 <-- B1 <-- sink DAI0

SectionGraph."pipe-pass-vol-capture-8" {
	index "8"

	lines [
		"PCM4C, , BUF8.0"
		"BUF8.0, , PGA8.0"
		"PGA8.0, , BUF8.1"
		
	]
}

#
# Pipeline Source and Sinks
#



#
# PCM Configuration
#

SectionPCMCapabilities."Passthrough Capture 4" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}





# Low Latency playback pipeline 9 on PCM 5 using max 2 channels of s16le.
# 1000us deadline on core 0 with priority 0




























# Low Latency Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."9 Master Playback Volume" {

	# control belongs to this index group
	index "9"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "32"
	invert "false"
	#TLV 32 steps from -64dB to 0dB for 2dB
	tlv "vtlv_m64s2"
 
}

#
# Volume configuration
#

SectionVendorTuples."playback_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."playback_pga_conf" {
	tuples "playback_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Playback" PCM
# with 2 sink and 0 source periods
SectionVendorTuples."PCM5P_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."PCM5P_data_w_comp" {
	tuples "PCM5P_tuples_w_comp"
}
SectionWidget."PCM5P" {
	index "9"
	type "aif_in"
	no_pm "true"
	stream_name "Passthrough Playback 5"
	data [
		"PCM5P_data_w_comp"
	]
}


# "Volume" has 2 source and x sink periods
SectionVendorTuples."PGA9.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA9.0_data_w" {
	tuples "PGA9.0_tuples_w"
}
SectionVendorTuples."PGA9.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."PGA9.0_data_str" {
	tuples "PGA9.0_tuples_str"
}
SectionWidget."PGA9.0" {
	index "9"
	type "pga"
	no_pm "true"
	data [
		"PGA9.0_data_w"
		"PGA9.0_data_str"
		"playback_pga_conf"
	]
	mixer [
		"9 Master Playback Volume"
		
	]

}

# Playback Buffers
SectionVendorTuples."BUF9.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF9.0_data" {
	tuples "BUF9.0_tuples"
}
SectionWidget."BUF9.0" {
	index "9"
	type "buffer"
	no_pm "true"
	data [
		"BUF9.0_data"
	]
}
SectionVendorTuples."BUF9.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF9.1_data" {
	tuples "BUF9.1_tuples"
}
SectionWidget."BUF9.1" {
	index "9"
	type "buffer"
	no_pm "true"
	data [
		"BUF9.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P --> B0 --> Volume 0 --> B1 --> sink DAI0

SectionGraph."pipe-pass-vol-playback-9" {
	index "9"

	lines [
		"BUF9.0, , PCM5P"
		"PGA9.0, , BUF9.0"
		"BUF9.1, , PGA9.0"
		
	]
}

#
# Pipeline Source and Sinks
#




#
# PCM Configuration

#
SectionPCMCapabilities."Passthrough Playback 5" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}






# Low Latency capture pipeline 10 on PCM 5 using max 2 channels of s16le.
# 1000us deadline on core 0 with priority 0




























# Passthrough with volume Pipeline and PCM
#
# Pipeline Endpoints for connection are :-
#
#  host PCM_C <-- B0 <-- Volume 0 <-- B1 <-- source DAI0

# Include topology builder




































 




























#
# Controls
#
# Volume Mixer control with max value of 32
 
SectionControlMixer."10 Master Capture Volume" {

	# control belongs to this index group
	index "10"

	#Channel register and shift for Front Left/Right
	channel."FL" {
		reg "1"
		shift "0"
	}
	channel."FR" {
		reg "1"
		shift "1"
	}
	
	# control uses bespoke driver get/put/info ID
	ops."ctl" {
		info "volsw"
		#256 binds the mixer control to volume get/put handlers
		get "256"
		put "256"
	}

	#
	max "80"
	invert "false"
	#TLV 80 steps from -50dB to +30dB for 1dB
	tlv "vtlv_m50s1"
 
}

#
# Volume Configuration
#

SectionVendorTuples."capture_pga_tokens" {
	tokens "sof_volume_tokens"

	tuples."word" {
		SOF_TKN_VOLUME_RAMP_STEP_TYPE	"0"
     		
		SOF_TKN_VOLUME_RAMP_STEP_MS		"250"
		
	}
}

SectionData."capture_pga_conf" {
	tuples "capture_pga_tokens"
}

#
# Components and Buffers
#

# Host "Passthrough Capture" PCM
# with 0 sink and 2 source periods
SectionVendorTuples."PCM5C_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PCM5C_data_w_comp" {
	tuples "PCM5C_tuples_w_comp"
}
SectionWidget."PCM5C" {
	index "10"
	type "aif_out"
	no_pm "true"
	stream_name "Passthrough Capture 5"
	data [
		"PCM5C_data_w_comp"
	]
}

# "Volume" has x source and 2 sink periods
SectionVendorTuples."PGA10.0_tuples_w" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."PGA10.0_data_w" {
	tuples "PGA10.0_tuples_w"
}
SectionVendorTuples."PGA10.0_tuples_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."PGA10.0_data_str" {
	tuples "PGA10.0_tuples_str"
}
SectionWidget."PGA10.0" {
	index "10"
	type "pga"
	no_pm "true"
	data [
		"PGA10.0_data_w"
		"PGA10.0_data_str"
		"capture_pga_conf"
	]
	mixer [
		"10 Master Capture Volume"
		
	]

}

# Capture Buffers
SectionVendorTuples."BUF10.0_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF10.0_data" {
	tuples "BUF10.0_tuples"
}
SectionWidget."BUF10.0" {
	index "10"
	type "buffer"
	no_pm "true"
	data [
		"BUF10.0_data"
	]
}
SectionVendorTuples."BUF10.1_tuples" {
	tokens "sof_buffer_tokens"
	tuples."word" {
		SOF_TKN_BUF_SIZE	"384"
		SOF_TKN_BUF_CAPS	"  113"
	}
}
SectionData."BUF10.1_data" {
	tuples "BUF10.1_tuples"
}
SectionWidget."BUF10.1" {
	index "10"
	type "buffer"
	no_pm "true"
	data [
		"BUF10.1_data"
	]
}

#
# Pipeline Graph
#
#  host PCM_P <-- B0 <-- Volume 0 <-- B1 <-- sink DAI0

SectionGraph."pipe-pass-vol-capture-10" {
	index "10"

	lines [
		"PCM5C, , BUF10.0"
		"BUF10.0, , PGA10.0"
		"PGA10.0, , BUF10.1"
		
	]
}

#
# Pipeline Source and Sinks
#



#
# PCM Configuration
#

SectionPCMCapabilities."Passthrough Capture 5" {

	formats "S32_LE,S24_LE,S16_LE"
	rate_min "48000"
	rate_max "48000"
	channels_min "2"
	channels_max "2"
	periods_min "2"
	periods_max "16"
	period_size_min	"192"
	period_size_max	"16384"
	buffer_size_min	"65536"
	buffer_size_max	"65536"
}






#
# DAIs configuration
#


# playback DAI is SSP0 using 2 periods
# Buffers use s16le format, 1000us deadline on core 0 with priority 0























# DAI Playback connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP0.OUT_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."SSP0.OUT_data_w_comp" {
	tuples "SSP0.OUT_tuples_w_comp"
}
SectionVendorTuples."SSP0.OUT_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"0"
		SOF_TKN_DAI_DIRECTION	"0"
	}
}
SectionData."SSP0.OUT_data_w" {
	tuples "SSP0.OUT_tuples_w"
}
SectionVendorTuples."SSP0.OUT_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP0.OUT_data_str" {
	tuples "SSP0.OUT_tuples_str"
}
SectionVendorTuples."SSP0.OUT_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."SSP0.OUT_data_comp_str" {
	tuples "SSP0.OUT_tuples_comp_str"
}
SectionWidget."SSP0.OUT" {
	index "4"
	type "dai_in"
	stream_name "SSP0-Codec"
	no_pm "true"
	data [
		"SSP0.OUT_data_w"
		"SSP0.OUT_data_w_comp"
		"SSP0.OUT_data_str"
		"SSP0.OUT_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.4.SSP0.OUT_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.4.SSP0.OUT_data" {
	tuples "PIPELINE.4.SSP0.OUT_tuples"
}
SectionWidget."PIPELINE.4.SSP0.OUT" {
	index "4"
	type "scheduler"
	no_pm "true"
	stream_name "SSP0.OUT"
	data [
		"PIPELINE.4.SSP0.OUT_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP0" {
	index "4"

	lines [
		"SSP0.OUT, , BUF4.1"
		
	]
}






# capture DAI is SSP0 using 2 periods
# Buffers use s16le format, 1000us deadline on core 0 with priority 0























# DAI Capture connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP0.IN_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."SSP0.IN_data_w_comp" {
	tuples "SSP0.IN_tuples_w_comp"
}
SectionVendorTuples."SSP0.IN_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"0"
		SOF_TKN_DAI_DIRECTION	"1"
	}
}
SectionData."SSP0.IN_data_w" {
	tuples "SSP0.IN_tuples_w"
}
SectionVendorTuples."SSP0.IN_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP0.IN_data_str" {
	tuples "SSP0.IN_tuples_str"
}
SectionVendorTuples."SSP0.IN_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."SSP0.IN_data_comp_str" {
	tuples "SSP0.IN_tuples_comp_str"
}
SectionWidget."SSP0.IN" {
	index "5"
	type "dai_out"
	stream_name "SSP0-Codec"
	no_pm "true"
	data [
		"SSP0.IN_data_w"
		"SSP0.IN_data_w_comp"
		"SSP0.IN_data_str"
		"SSP0.IN_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.5.SSP0.IN_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.5.SSP0.IN_data" {
	tuples "PIPELINE.5.SSP0.IN_tuples"
}
SectionWidget."PIPELINE.5.SSP0.IN" {
	index "5"
	type "scheduler"
	no_pm "true"
	stream_name "SSP0.IN"
	data [
		"PIPELINE.5.SSP0.IN_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP0" {
	index "5"

	lines [
		"BUF5.1, , SSP0.IN"
		
	]
}






# capture DAI is SSP1 using 2 periods
# Buffers use s16le format, 1000us deadline on core 0 with priority 0























# DAI Capture connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP1.IN_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."SSP1.IN_data_w_comp" {
	tuples "SSP1.IN_tuples_w_comp"
}
SectionVendorTuples."SSP1.IN_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"1"
		SOF_TKN_DAI_DIRECTION	"1"
	}
}
SectionData."SSP1.IN_data_w" {
	tuples "SSP1.IN_tuples_w"
}
SectionVendorTuples."SSP1.IN_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP1.IN_data_str" {
	tuples "SSP1.IN_tuples_str"
}
SectionVendorTuples."SSP1.IN_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."SSP1.IN_data_comp_str" {
	tuples "SSP1.IN_tuples_comp_str"
}
SectionWidget."SSP1.IN" {
	index "6"
	type "dai_out"
	stream_name "SSP1-Codec"
	no_pm "true"
	data [
		"SSP1.IN_data_w"
		"SSP1.IN_data_w_comp"
		"SSP1.IN_data_str"
		"SSP1.IN_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.6.SSP1.IN_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.6.SSP1.IN_data" {
	tuples "PIPELINE.6.SSP1.IN_tuples"
}
SectionWidget."PIPELINE.6.SSP1.IN" {
	index "6"
	type "scheduler"
	no_pm "true"
	stream_name "SSP1.IN"
	data [
		"PIPELINE.6.SSP1.IN_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP1" {
	index "6"

	lines [
		"BUF6.1, , SSP1.IN"
		
	]
}






# playback DAI is SSP2 using 2 periods
# Buffers use s32le format, 1000us deadline on core 0 with priority 0























# DAI Playback connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP2.OUT_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."SSP2.OUT_data_w_comp" {
	tuples "SSP2.OUT_tuples_w_comp"
}
SectionVendorTuples."SSP2.OUT_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"2"
		SOF_TKN_DAI_DIRECTION	"0"
	}
}
SectionData."SSP2.OUT_data_w" {
	tuples "SSP2.OUT_tuples_w"
}
SectionVendorTuples."SSP2.OUT_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP2.OUT_data_str" {
	tuples "SSP2.OUT_tuples_str"
}
SectionVendorTuples."SSP2.OUT_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."SSP2.OUT_data_comp_str" {
	tuples "SSP2.OUT_tuples_comp_str"
}
SectionWidget."SSP2.OUT" {
	index "2"
	type "dai_in"
	stream_name "SSP2-Codec"
	no_pm "true"
	data [
		"SSP2.OUT_data_w"
		"SSP2.OUT_data_w_comp"
		"SSP2.OUT_data_str"
		"SSP2.OUT_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.2.SSP2.OUT_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.2.SSP2.OUT_data" {
	tuples "PIPELINE.2.SSP2.OUT_tuples"
}
SectionWidget."PIPELINE.2.SSP2.OUT" {
	index "2"
	type "scheduler"
	no_pm "true"
	stream_name "SSP2.OUT"
	data [
		"PIPELINE.2.SSP2.OUT_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP2" {
	index "2"

	lines [
		"SSP2.OUT, , BUF2.1"
		
	]
}






# capture DAI is SSP2 using 2 periods
# Buffers use s32le format, 1000us deadline on core 0 with priority 0























# DAI Capture connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP2.IN_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."SSP2.IN_data_w_comp" {
	tuples "SSP2.IN_tuples_w_comp"
}
SectionVendorTuples."SSP2.IN_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"2"
		SOF_TKN_DAI_DIRECTION	"1"
	}
}
SectionData."SSP2.IN_data_w" {
	tuples "SSP2.IN_tuples_w"
}
SectionVendorTuples."SSP2.IN_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP2.IN_data_str" {
	tuples "SSP2.IN_tuples_str"
}
SectionVendorTuples."SSP2.IN_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."SSP2.IN_data_comp_str" {
	tuples "SSP2.IN_tuples_comp_str"
}
SectionWidget."SSP2.IN" {
	index "3"
	type "dai_out"
	stream_name "SSP2-Codec"
	no_pm "true"
	data [
		"SSP2.IN_data_w"
		"SSP2.IN_data_w_comp"
		"SSP2.IN_data_str"
		"SSP2.IN_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.3.SSP2.IN_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.3.SSP2.IN_data" {
	tuples "PIPELINE.3.SSP2.IN_tuples"
}
SectionWidget."PIPELINE.3.SSP2.IN" {
	index "3"
	type "scheduler"
	no_pm "true"
	stream_name "SSP2.IN"
	data [
		"PIPELINE.3.SSP2.IN_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP2" {
	index "3"

	lines [
		"BUF3.1, , SSP2.IN"
		
	]
}






# playback DAI is SSP3 using 2 periods
# Buffers use s16le format, 1000us deadline on core 0 with priority 0























# DAI Playback connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP3.OUT_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."SSP3.OUT_data_w_comp" {
	tuples "SSP3.OUT_tuples_w_comp"
}
SectionVendorTuples."SSP3.OUT_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"3"
		SOF_TKN_DAI_DIRECTION	"0"
	}
}
SectionData."SSP3.OUT_data_w" {
	tuples "SSP3.OUT_tuples_w"
}
SectionVendorTuples."SSP3.OUT_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP3.OUT_data_str" {
	tuples "SSP3.OUT_tuples_str"
}
SectionVendorTuples."SSP3.OUT_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."SSP3.OUT_data_comp_str" {
	tuples "SSP3.OUT_tuples_comp_str"
}
SectionWidget."SSP3.OUT" {
	index "7"
	type "dai_in"
	stream_name "SSP3-Codec"
	no_pm "true"
	data [
		"SSP3.OUT_data_w"
		"SSP3.OUT_data_w_comp"
		"SSP3.OUT_data_str"
		"SSP3.OUT_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.7.SSP3.OUT_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.7.SSP3.OUT_data" {
	tuples "PIPELINE.7.SSP3.OUT_tuples"
}
SectionWidget."PIPELINE.7.SSP3.OUT" {
	index "7"
	type "scheduler"
	no_pm "true"
	stream_name "SSP3.OUT"
	data [
		"PIPELINE.7.SSP3.OUT_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP3" {
	index "7"

	lines [
		"SSP3.OUT, , BUF7.1"
		
	]
}






# capture DAI is SSP3 using 2 periods
# Buffers use s16le format, 1000us deadline on core 0 with priority 0























# DAI Capture connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP3.IN_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."SSP3.IN_data_w_comp" {
	tuples "SSP3.IN_tuples_w_comp"
}
SectionVendorTuples."SSP3.IN_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"3"
		SOF_TKN_DAI_DIRECTION	"1"
	}
}
SectionData."SSP3.IN_data_w" {
	tuples "SSP3.IN_tuples_w"
}
SectionVendorTuples."SSP3.IN_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP3.IN_data_str" {
	tuples "SSP3.IN_tuples_str"
}
SectionVendorTuples."SSP3.IN_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."SSP3.IN_data_comp_str" {
	tuples "SSP3.IN_tuples_comp_str"
}
SectionWidget."SSP3.IN" {
	index "8"
	type "dai_out"
	stream_name "SSP3-Codec"
	no_pm "true"
	data [
		"SSP3.IN_data_w"
		"SSP3.IN_data_w_comp"
		"SSP3.IN_data_str"
		"SSP3.IN_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.8.SSP3.IN_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.8.SSP3.IN_data" {
	tuples "PIPELINE.8.SSP3.IN_tuples"
}
SectionWidget."PIPELINE.8.SSP3.IN" {
	index "8"
	type "scheduler"
	no_pm "true"
	stream_name "SSP3.IN"
	data [
		"PIPELINE.8.SSP3.IN_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP3" {
	index "8"

	lines [
		"BUF8.1, , SSP3.IN"
		
	]
}






# playback DAI is SSP4 using 2 periods
# Buffers use s32le format, 1000us deadline on core 0 with priority 0























# DAI Playback connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP4.OUT_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."SSP4.OUT_data_w_comp" {
	tuples "SSP4.OUT_tuples_w_comp"
}
SectionVendorTuples."SSP4.OUT_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"4"
		SOF_TKN_DAI_DIRECTION	"0"
	}
}
SectionData."SSP4.OUT_data_w" {
	tuples "SSP4.OUT_tuples_w"
}
SectionVendorTuples."SSP4.OUT_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP4.OUT_data_str" {
	tuples "SSP4.OUT_tuples_str"
}
SectionVendorTuples."SSP4.OUT_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s32le"
	}
}
SectionData."SSP4.OUT_data_comp_str" {
	tuples "SSP4.OUT_tuples_comp_str"
}
SectionWidget."SSP4.OUT" {
	index "1"
	type "dai_in"
	stream_name "SSP4-Codec"
	no_pm "true"
	data [
		"SSP4.OUT_data_w"
		"SSP4.OUT_data_w_comp"
		"SSP4.OUT_data_str"
		"SSP4.OUT_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.1.SSP4.OUT_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.1.SSP4.OUT_data" {
	tuples "PIPELINE.1.SSP4.OUT_tuples"
}
SectionWidget."PIPELINE.1.SSP4.OUT" {
	index "1"
	type "scheduler"
	no_pm "true"
	stream_name "SSP4.OUT"
	data [
		"PIPELINE.1.SSP4.OUT_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP4" {
	index "1"

	lines [
		"SSP4.OUT, , BUF1.1"
		
	]
}






# playback DAI is SSP5 using 2 periods
# Buffers use s16le format, 1000us deadline on core 0 with priority 0























# DAI Playback connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP5.OUT_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"0"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"2"
	}
}
SectionData."SSP5.OUT_data_w_comp" {
	tuples "SSP5.OUT_tuples_w_comp"
}
SectionVendorTuples."SSP5.OUT_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"5"
		SOF_TKN_DAI_DIRECTION	"0"
	}
}
SectionData."SSP5.OUT_data_w" {
	tuples "SSP5.OUT_tuples_w"
}
SectionVendorTuples."SSP5.OUT_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP5.OUT_data_str" {
	tuples "SSP5.OUT_tuples_str"
}
SectionVendorTuples."SSP5.OUT_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."SSP5.OUT_data_comp_str" {
	tuples "SSP5.OUT_tuples_comp_str"
}
SectionWidget."SSP5.OUT" {
	index "9"
	type "dai_in"
	stream_name "SSP5-Codec"
	no_pm "true"
	data [
		"SSP5.OUT_data_w"
		"SSP5.OUT_data_w_comp"
		"SSP5.OUT_data_str"
		"SSP5.OUT_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.9.SSP5.OUT_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.9.SSP5.OUT_data" {
	tuples "PIPELINE.9.SSP5.OUT_tuples"
}
SectionWidget."PIPELINE.9.SSP5.OUT" {
	index "9"
	type "scheduler"
	no_pm "true"
	stream_name "SSP5.OUT"
	data [
		"PIPELINE.9.SSP5.OUT_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP5" {
	index "9"

	lines [
		"SSP5.OUT, , BUF9.1"
		
	]
}






# capture DAI is SSP5 using 2 periods
# Buffers use s16le format, 1000us deadline on core 0 with priority 0























# DAI Capture connector

# Include topology builder




































 
























#
# DAI definitions
#
SectionVendorTuples."SSP5.IN_tuples_w_comp" {
	tokens "sof_comp_tokens"
	tuples."word" {
		SOF_TKN_COMP_PERIOD_SINK_COUNT		"2"
		SOF_TKN_COMP_PERIOD_SOURCE_COUNT	"0"
	}
}
SectionData."SSP5.IN_data_w_comp" {
	tuples "SSP5.IN_tuples_w_comp"
}
SectionVendorTuples."SSP5.IN_tuples_w" {
	tokens "sof_dai_tokens"
	tuples."word" {
		SOF_TKN_DAI_INDEX	"5"
		SOF_TKN_DAI_DIRECTION	"1"
	}
}
SectionData."SSP5.IN_data_w" {
	tuples "SSP5.IN_tuples_w"
}
SectionVendorTuples."SSP5.IN_tuples_str" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE	"SSP"
	}
}
SectionData."SSP5.IN_data_str" {
	tuples "SSP5.IN_tuples_str"
}
SectionVendorTuples."SSP5.IN_tuples_comp_str" {
	tokens "sof_comp_tokens"
	tuples."string" {
		SOF_TKN_COMP_FORMAT	"s16le"
	}
}
SectionData."SSP5.IN_data_comp_str" {
	tuples "SSP5.IN_tuples_comp_str"
}
SectionWidget."SSP5.IN" {
	index "10"
	type "dai_out"
	stream_name "SSP5-Codec"
	no_pm "true"
	data [
		"SSP5.IN_data_w"
		"SSP5.IN_data_w_comp"
		"SSP5.IN_data_str"
		"SSP5.IN_data_comp_str"
	]
}

#
# DAI pipeline - always use 0 for DAIs
#
SectionVendorTuples."PIPELINE.10.SSP5.IN_tuples" {
	tokens "sof_sched_tokens"
	tuples."word" {
		SOF_TKN_SCHED_PERIOD		"1000"
		SOF_TKN_SCHED_PRIORITY		"0"
		SOF_TKN_SCHED_CORE		"0"
		SOF_TKN_SCHED_FRAMES		"0"
		SOF_TKN_SCHED_TIME_DOMAIN	"1"
	}
}
SectionData."PIPELINE.10.SSP5.IN_data" {
	tuples "PIPELINE.10.SSP5.IN_tuples"
}
SectionWidget."PIPELINE.10.SSP5.IN" {
	index "10"
	type "scheduler"
	no_pm "true"
	stream_name "SSP5.IN"
	data [
		"PIPELINE.10.SSP5.IN_data"
		"pipe_dai_schedule_plat"
	]
}

#
# Graph connections to pipelines

SectionGraph."SSP5" {
	index "10"

	lines [
		"BUF10.1, , SSP5.IN"
		
	]
}






# PCM Low Latency, id 0
SectionPCM."Port0" {

	# used for binding to the PCM
	id "2"

	dai."Port0 2" {
		id "2"
	}

	pcm."capture" {

		capabilities "Passthrough Capture 2"
	}

	pcm."playback" {

		capabilities "Passthrough Playback 2"
	}
}



SectionPCM."Port1" {

	# used for binding to the PCM
	id "3"

	dai."Port1 3" {
		id "3"
	}

	pcm."capture" {

		capabilities "Passthrough Capture 3"
	}

}


SectionPCM."Port2" {

	# used for binding to the PCM
	id "1"

	dai."Port2 1" {
		id "1"
	}

	pcm."capture" {

		capabilities "Passthrough Capture 1"
	}

	pcm."playback" {

		capabilities "Passthrough Playback 1"
	}
}

SectionPCM."Port3" {

	# used for binding to the PCM
	id "4"

	dai."Port3 4" {
		id "4"
	}

	pcm."capture" {

		capabilities "Passthrough Capture 4"
	}

	pcm."playback" {

		capabilities "Passthrough Playback 4"
	}
}

SectionPCM."Port4" {

	# used for binding to the PCM
	id "0"

	dai."Port4 0" {
		id "0"
	}

	pcm."playback" {

		capabilities "Passthrough Playback 0"
	}
}

SectionPCM."Port5" {

	# used for binding to the PCM
	id "5"

	dai."Port5 5" {
		id "5"
	}

	pcm."capture" {

		capabilities "Passthrough Capture 5"
	}

	pcm."playback" {

		capabilities "Passthrough Playback 5"
	}
}


#
# BE configurations - overrides config in ACPI if present
#
SectionHWConfig."SSP0" {

	id		"0"

	format		"I2S"
	mclk		"codec_mclk_in"
	mclk_freq	"24576000"
	
	bclk		"codec_slave"
	bclk_freq	"1536000"
	
	fsync		"codec_slave"
	fsync_freq	"48000"
	
	tdm_slots	"2"
	tdm_slot_width	"16"
	tx_slots	"3"
	rx_slots	"3"

}
SectionVendorTuples."DAICONFIG.SSP0_tuples" {
	tokens "sof_ssp_tokens"
	tuples."word" {
		SOF_TKN_INTEL_SSP_SAMPLE_BITS	"16"
		SOF_TKN_INTEL_SSP_QUIRKS	""
		SOF_TKN_INTEL_SSP_BCLK_DELAY	""
	}
	tuples."short" {
		SOF_TKN_INTEL_SSP_MCLK_ID	""
	}
}
SectionData."DAICONFIG.SSP0_data" {
	tuples "DAICONFIG.SSP0_tuples"
}



SectionVendorTuples."DAICONFIG.SSP0_tuples_common" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE		"SSP"
	}
	tuples."word" {
		SOF_TKN_DAI_INDEX		"0"
	}
}
SectionData."DAICONFIG.SSP0_data_common" {
	tuples "DAICONFIG.SSP0_tuples_common"
}

SectionBE."SSP0-Codec" {
	id "0"
	index "0"
	default_hw_conf_id	"0"

	hw_configs [
		"SSP0"
	]
	data [
		"DAICONFIG.SSP0_data"
		"DAICONFIG.SSP0_data_common"

	]
}




SectionHWConfig."SSP1" {

	id		"1"

	format		"I2S"
	mclk		"codec_mclk_in"
	mclk_freq	"24576000"
	
	bclk		"codec_slave"
	bclk_freq	"1536000"
	
	fsync		"codec_slave"
	fsync_freq	"48000"
	
	tdm_slots	"2"
	tdm_slot_width	"16"
	tx_slots	"3"
	rx_slots	"3"

}
SectionVendorTuples."DAICONFIG.SSP1_tuples" {
	tokens "sof_ssp_tokens"
	tuples."word" {
		SOF_TKN_INTEL_SSP_SAMPLE_BITS	"16"
		SOF_TKN_INTEL_SSP_QUIRKS	""
		SOF_TKN_INTEL_SSP_BCLK_DELAY	""
	}
	tuples."short" {
		SOF_TKN_INTEL_SSP_MCLK_ID	""
	}
}
SectionData."DAICONFIG.SSP1_data" {
	tuples "DAICONFIG.SSP1_tuples"
}



SectionVendorTuples."DAICONFIG.SSP1_tuples_common" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE		"SSP"
	}
	tuples."word" {
		SOF_TKN_DAI_INDEX		"1"
	}
}
SectionData."DAICONFIG.SSP1_data_common" {
	tuples "DAICONFIG.SSP1_tuples_common"
}

SectionBE."SSP1-Codec" {
	id "1"
	index "0"
	default_hw_conf_id	"1"

	hw_configs [
		"SSP1"
	]
	data [
		"DAICONFIG.SSP1_data"
		"DAICONFIG.SSP1_data_common"

	]
}




SectionHWConfig."SSP2" {

	id		"2"

	format		"DSP_B"
	mclk		"codec_mclk_in"
	mclk_freq	"24576000"
	
	bclk		"codec_slave"
	bclk_freq	"12288000"
	
	fsync		"codec_slave"
	fsync_freq	"48000"
	
	tdm_slots	"8"
	tdm_slot_width	"32"
	tx_slots	"255"
	rx_slots	"255"

}
SectionVendorTuples."DAICONFIG.SSP2_tuples" {
	tokens "sof_ssp_tokens"
	tuples."word" {
		SOF_TKN_INTEL_SSP_SAMPLE_BITS	"32"
		SOF_TKN_INTEL_SSP_QUIRKS	""
		SOF_TKN_INTEL_SSP_BCLK_DELAY	""
	}
	tuples."short" {
		SOF_TKN_INTEL_SSP_MCLK_ID	""
	}
}
SectionData."DAICONFIG.SSP2_data" {
	tuples "DAICONFIG.SSP2_tuples"
}



SectionVendorTuples."DAICONFIG.SSP2_tuples_common" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE		"SSP"
	}
	tuples."word" {
		SOF_TKN_DAI_INDEX		"2"
	}
}
SectionData."DAICONFIG.SSP2_data_common" {
	tuples "DAICONFIG.SSP2_tuples_common"
}

SectionBE."SSP2-Codec" {
	id "2"
	index "0"
	default_hw_conf_id	"2"

	hw_configs [
		"SSP2"
	]
	data [
		"DAICONFIG.SSP2_data"
		"DAICONFIG.SSP2_data_common"

	]
}




SectionHWConfig."SSP3" {

	id		"3"

	format		"I2S"
	mclk		"codec_mclk_in"
	mclk_freq	"24576000"
	
	bclk		"codec_slave"
	bclk_freq	"1536000"
	
	fsync		"codec_slave"
	fsync_freq	"48000"
	
	tdm_slots	"2"
	tdm_slot_width	"16"
	tx_slots	"3"
	rx_slots	"3"

}
SectionVendorTuples."DAICONFIG.SSP3_tuples" {
	tokens "sof_ssp_tokens"
	tuples."word" {
		SOF_TKN_INTEL_SSP_SAMPLE_BITS	"16"
		SOF_TKN_INTEL_SSP_QUIRKS	""
		SOF_TKN_INTEL_SSP_BCLK_DELAY	""
	}
	tuples."short" {
		SOF_TKN_INTEL_SSP_MCLK_ID	""
	}
}
SectionData."DAICONFIG.SSP3_data" {
	tuples "DAICONFIG.SSP3_tuples"
}



SectionVendorTuples."DAICONFIG.SSP3_tuples_common" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE		"SSP"
	}
	tuples."word" {
		SOF_TKN_DAI_INDEX		"3"
	}
}
SectionData."DAICONFIG.SSP3_data_common" {
	tuples "DAICONFIG.SSP3_tuples_common"
}

SectionBE."SSP3-Codec" {
	id "3"
	index "0"
	default_hw_conf_id	"3"

	hw_configs [
		"SSP3"
	]
	data [
		"DAICONFIG.SSP3_data"
		"DAICONFIG.SSP3_data_common"

	]
}




SectionHWConfig."SSP4" {

	id		"4"

	format		"DSP_B"
	mclk		"codec_mclk_in"
	mclk_freq	"24576000"
	
	bclk		"codec_slave"
	bclk_freq	"12288000"
	
	fsync		"codec_slave"
	fsync_freq	"48000"
	
	tdm_slots	"8"
	tdm_slot_width	"32"
	tx_slots	"15"
	rx_slots	"15"

}
SectionVendorTuples."DAICONFIG.SSP4_tuples" {
	tokens "sof_ssp_tokens"
	tuples."word" {
		SOF_TKN_INTEL_SSP_SAMPLE_BITS	"32"
		SOF_TKN_INTEL_SSP_QUIRKS	""
		SOF_TKN_INTEL_SSP_BCLK_DELAY	""
	}
	tuples."short" {
		SOF_TKN_INTEL_SSP_MCLK_ID	""
	}
}
SectionData."DAICONFIG.SSP4_data" {
	tuples "DAICONFIG.SSP4_tuples"
}



SectionVendorTuples."DAICONFIG.SSP4_tuples_common" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE		"SSP"
	}
	tuples."word" {
		SOF_TKN_DAI_INDEX		"4"
	}
}
SectionData."DAICONFIG.SSP4_data_common" {
	tuples "DAICONFIG.SSP4_tuples_common"
}

SectionBE."SSP4-Codec" {
	id "4"
	index "0"
	default_hw_conf_id	"4"

	hw_configs [
		"SSP4"
	]
	data [
		"DAICONFIG.SSP4_data"
		"DAICONFIG.SSP4_data_common"

	]
}




SectionHWConfig."SSP5" {

	id		"5"

	format		"I2S"
	mclk		"codec_mclk_in"
	mclk_freq	"24576000"
	
	bclk		"codec_slave"
	bclk_freq	"1536000"
	
	fsync		"codec_slave"
	fsync_freq	"48000"
	
	tdm_slots	"2"
	tdm_slot_width	"16"
	tx_slots	"3"
	rx_slots	"3"

}
SectionVendorTuples."DAICONFIG.SSP5_tuples" {
	tokens "sof_ssp_tokens"
	tuples."word" {
		SOF_TKN_INTEL_SSP_SAMPLE_BITS	"16"
		SOF_TKN_INTEL_SSP_QUIRKS	""
		SOF_TKN_INTEL_SSP_BCLK_DELAY	""
	}
	tuples."short" {
		SOF_TKN_INTEL_SSP_MCLK_ID	""
	}
}
SectionData."DAICONFIG.SSP5_data" {
	tuples "DAICONFIG.SSP5_tuples"
}



SectionVendorTuples."DAICONFIG.SSP5_tuples_common" {
	tokens "sof_dai_tokens"
	tuples."string" {
		SOF_TKN_DAI_TYPE		"SSP"
	}
	tuples."word" {
		SOF_TKN_DAI_INDEX		"5"
	}
}
SectionData."DAICONFIG.SSP5_data_common" {
	tuples "DAICONFIG.SSP5_tuples_common"
}

SectionBE."SSP5-Codec" {
	id "5"
	index "0"
	default_hw_conf_id	"5"

	hw_configs [
		"SSP5"
	]
	data [
		"DAICONFIG.SSP5_data"
		"DAICONFIG.SSP5_data_common"

	]
}





SectionWidget."BtHfp_ssp0_in" {
       index "0"
       type "input"
       no_pm "true"
}
SectionGraph."SSP" {
       index "0"

       lines [
               "SSP0.IN, , BtHfp_ssp0_in"
       ]
}
SectionWidget."BtHfp_ssp0_out" {
       index "1"
       type "output"
       no_pm "true"
}
SectionGraph."SSP" {
       index "1"

       lines [
               "BtHfp_ssp0_out, , SSP0.OUT"
       ]
}
SectionWidget."hdmi_ssp1_in" {
       index "2"
       type "input"
       no_pm "true"
}
SectionGraph."SSP" {
       index "2"

       lines [
               "SSP1.IN, , hdmi_ssp1_in"
       ]
}
SectionWidget."dirana_in" {
       index "3"
       type "input"
       no_pm "true"
}
SectionGraph."SSP" {
       index "3"

       lines [
               "SSP2.IN, , dirana_in"
       ]
}
SectionWidget."dirana_aux_in" {
       index "4"
       type "input"
       no_pm "true"
}
SectionGraph."SSP" {
       index "4"

       lines [
               "SSP2.IN, , dirana_aux_in"
       ]
}
SectionWidget."dirana_tuner_in" {
       index "5"
       type "input"
       no_pm "true"
}
SectionGraph."SSP" {
       index "5"

       lines [
               "SSP2.IN, , dirana_tuner_in"
       ]
}
SectionWidget."dirana_out" {
       index "6"
       type "output"
       no_pm "true"
}
SectionGraph."SSP" {
       index "6"

       lines [
               "dirana_out, , SSP2.OUT"
       ]
}
SectionWidget."Modem_ssp3_in" {
       index "7"
       type "input"
       no_pm "true"
}
SectionGraph."SSP" {
       index "7"

       lines [
               "SSP3.IN, , Modem_ssp3_in"
       ]
}
SectionWidget."Modem_ssp3_out" {
       index "8"
       type "output"
       no_pm "true"
}
SectionGraph."SSP" {
       index "8"

       lines [
               "Modem_ssp3_out, , SSP3.OUT"
       ]
}
SectionWidget."codec0_out" {
       index "9"
       type "output"
       no_pm "true"
}
SectionGraph."SSP" {
       index "9"

       lines [
               "codec0_out, , SSP4.OUT"
       ]
}
SectionWidget."TestPin_ssp5_in" {
       index "10"
       type "input"
       no_pm "true"
}
SectionGraph."SSP" {
       index "10"

       lines [
               "SSP5.IN, , TestPin_ssp5_in"
       ]
}
SectionWidget."TestPin_ssp5_out" {
       index "11"
       type "output"
       no_pm "true"
}
SectionGraph."SSP" {
       index "11"

       lines [
               "TestPin_ssp5_out, , SSP5.OUT"
       ]
}
SectionWidget."ssp0 Tx" {
       index "12"
       type "out_drv"
       no_pm "true"
}
SectionWidget."ssp0 Rx" {
       index "13"
       type "out_drv"
       no_pm "true"
}
SectionWidget."ssp1 Rx" {
       index "14"
       type "out_drv"
       no_pm "true"
}
SectionWidget."ssp2 Tx" {
       index "15"
       type "out_drv"
       no_pm "true"
}
SectionWidget."ssp2 Rx" {
       index "16"
       type "out_drv"
       no_pm "true"
}
SectionWidget."ssp3 Tx" {
       index "17"
       type "out_drv"
       no_pm "true"
}
SectionWidget."ssp3 Rx" {
       index "18"
       type "out_drv"
       no_pm "true"
}
SectionWidget."ssp4 Tx" {
       index "19"
       type "out_drv"
       no_pm "true"
}
SectionWidget."ssp5 Tx" {
       index "20"
       type "out_drv"
       no_pm "true"
}
SectionWidget."ssp5 Rx" {
       index "21"
       type "out_drv"
       no_pm "true"
}
